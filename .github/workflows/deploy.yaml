name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'

permissions:
  packages: write
  contents: read

jobs:
  build-and-push-aniways-api-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker CLI
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./api
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          tags: |
            ghcr.io/coeeter/aniways-api:latest
            ghcr.io/coeeter/aniways-api:${{ github.sha }}

  build-and-push-aniways-streaming-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker CLI
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./streaming
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          tags: |
            ghcr.io/coeeter/aniways-streaming:latest
            ghcr.io/coeeter/aniways-streaming:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-and-push-aniways-api-image
      - build-and-push-aniways-streaming-image
    steps:
      - uses: actions/checkout@v4

      - name: Login to Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Set up Docker Context
        run: |
          docker context create remote --docker "host=ssh://deploy@${{ secrets.SSH_HOST }}"

      - name: Add environment variables to GitHub Actions environment
        run: |
          echo "GITHUB_SHA=${{ github.sha }}" >> $GITHUB_ENV
          echo "LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}" >> $GITHUB_ENV
          echo "API_DOMAIN=${{ secrets.API_DOMAIN }}" >> $GITHUB_ENV
          echo "STREAMING_DOMAIN=${{ secrets.STREAMING_DOMAIN }}" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV

      - name: Deploy Docker Stack
        run: |
          docker context use remote
          docker stack deploy -c docker-compose.yaml aniways --with-registry-auth --detach=false
